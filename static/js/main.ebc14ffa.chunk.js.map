{"version":3,"sources":["component/sheet/Label.module.css","component/sheet/index.module.css","component/setting/StyleSetting.tsx","component/setting/FileReader.tsx","component/setting/index.tsx","component/sheet/Label.tsx","component/sheet/index.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StyleSetting","props","handleInputChange","e","target","value","type","checked","name","onChangeFn","min","state","fontSize","onChange","linesNum","width","frame","align","readFileAsText","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsText","FiileReader","a","async","files","item","fileText","csvData","parse","columns","Setting","updateFile","updateStyle","style","Label","labelStyle","borderStyle","border","textAlign","makeLabelStyle","rowStyle","makeLabelRowStyle","rows","content","map","v","i","className","classes","label__row","fontStyle","key","label","Sheet","labels","contents","length","dif","Array","fill","push","formatContent","sheet","sampleLabelContent","defaultState","_","App","useState","setState","href","updatedState","onClick","window","print","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,WAAa,4B,mBCA5DD,EAAOC,QAAU,CAAC,MAAQ,uB,2PC4EXC,G,MAzEM,SAACC,GACpB,IAAMC,EAAoB,SACxBC,GAEA,IAAMC,EAASD,EAAEC,OAEXC,EACY,aAAhBD,EAAOE,KAAiCF,EAFTG,QAEmBH,EAAOC,MACrDG,EAAOJ,EAAOI,KACpBP,EAAMQ,WAAN,eACGD,EAAOH,KAIZ,OACE,8BACE,kCACE,6BACE,2BACEG,KAAK,WACLF,KAAK,SACLI,IAAI,IACJL,MAAOJ,EAAMU,MAAMC,SACnBC,SAAUX,IAEZ,+FAEF,6BACE,2BACEM,KAAK,WACLF,KAAK,SACLI,IAAI,IACJL,MAAOJ,EAAMU,MAAMG,SACnBD,SAAUX,IAEZ,kFAEF,6BACE,2BACEM,KAAK,QACLF,KAAK,SACLI,IAAI,IACJL,MAAOJ,EAAMU,MAAMI,MACnBF,SAAUX,IAEZ,+EAEF,6BACE,2BACEM,KAAK,QACLF,KAAK,WACLC,QAASN,EAAMU,MAAMK,MACrBH,SAAUX,IAEZ,sFAEF,6BACE,4BACEM,KAAK,QACLH,MAAOJ,EAAMU,MAAMM,MACnBJ,SAAUX,GAEV,4BAAQG,MAAM,QAAd,iBACA,4BAAQA,MAAM,UAAd,yBACA,4BAAQA,MAAM,SAAd,mBAEF,8E,kCC7CV,SAASa,EAAeC,GACtB,OAAO,IAAIC,SAAgB,SAACC,EAASC,GACnC,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,kBAAMJ,EAASE,EAAOG,QAAqB,KAC3DH,EAAOI,QAAU,kBAAML,EAAOC,EAAOK,QACrCL,EAAOM,WAAWV,MAIPW,MA3BK,SAAC7B,GAUnB,OACE,2BACEK,KAAK,OACLO,SAXsB,SAAOV,GAAP,qBAAA4B,EAAAC,OAAA,mDAClBb,EADkB,UACXhB,EAAEC,OAAO6B,aADE,aACX,EAAgBC,KAAK,GADV,mEAAAH,EAAA,MAGDb,EAAeC,IAHd,OAGlBgB,EAHkB,OAIlBC,EAAqBC,IAAMF,EAAU,CAAEG,SAAS,IACtDrC,EAAMY,SAASuB,GALS,yCCKbG,EATC,SAACtC,GACf,OACE,6BACE,kBAAC,EAAD,CAAYY,SAAUZ,EAAMuC,aAC5B,kBAAC,EAAD,CAAc/B,WAAYR,EAAMwC,YAAa9B,MAAOV,EAAMU,MAAM+B,U,iBCgCvDC,EAhBD,SAAC1C,GACb,IAAM2C,EArBe,SAAC3C,GACtB,IAAM4C,EAA6B5C,EAAMyC,MAAM1B,MAC3C,GACA,CAAE8B,OAAQ,QAOd,OANgB,eACXD,EADW,CAEd9B,MAAOd,EAAMyC,MAAM3B,MAAQ,KAC3BgC,UAAW9C,EAAMyC,MAAMzB,MACvBL,SAAUX,EAAMyC,MAAM9B,SAAW,OAahBoC,CAAe/C,GAC5BgD,EATkB,SAAChD,GAIzB,OAHmCA,EAAMyC,MAAM1B,MAC3C,GACA,CAAE8B,OAAQ,QAMGI,CAAkBjD,GAE7BkD,EAAOlD,EAAMmD,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OAC7B,uBAAKC,UAAWC,IAAQC,WAAYhB,MAAa,IAANa,EAAA,eAAcN,EAAd,CAAwBU,UAAW,WAAYV,EAAUW,IAAKL,GACvG,2BAAMD,OAGV,OACE,uBAAKE,UAAWC,IAAQI,MAAOnB,MAAOE,GACnCO,I,iBCTQW,EARD,SAAC7D,GACb,IACM8D,EAhBc,SAACC,EAAuBlD,GAW5C,OAVkBkD,EAASX,KAAI,SAAAD,GAC7B,IAAME,EAAC,YAAOF,GACd,GAAItC,EAAWwC,EAAEW,OAAQ,CACvB,IAAMC,EAAgBC,MAAMrD,EAAWwC,EAAEW,QAAQG,KAAK,UACtDd,EAAEe,KAAF,MAAAf,EAAC,YAASY,SAEVZ,EAAEW,OAASnD,EAEb,OAAOwC,KAMQgB,CAAcrE,EAAM+D,SAAU/D,EAAMyC,MAAM5B,UACnCuC,KAAI,SAACC,EAAGC,GAAJ,OAC1B,gBAAC,EAAD,CAAOH,QAASE,EAAGZ,MAAOzC,EAAMyC,MAAOkB,IAAKL,OAE9C,OAAO,uBAAKC,UAAWC,IAAQc,OAAQR,ICbnCS,G,MAAqB,CACzB,sBACA,uBACA,mBAHyB,iCAKzB,oDAGIC,EAA2B,CAC/BT,SAFqB,YAAIG,MAAM,MAAMd,KAAI,SAACqB,GAAD,OAAOF,KAGhD9B,MAAO,CACL1B,OAAO,EACPD,MAAO,GACPE,MAAO,SACPH,SAAU,EACVF,SAAU,IAgDC+D,EA5CH,WAAO,IAAD,EACUC,mBAASH,GADnB,mBACT9D,EADS,KACFkE,EADE,KAsBhB,OACE,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,YACb,uBAAGsB,KAAK,4CAAR,oEAGA,kBAAC,EAAD,CACErC,YA1BY,SAACa,GACnB,IAAMyB,EAAY,eACbpE,EADa,CAEhB+B,MAAM,eACD/B,EAAM+B,MADN,GAEAY,KAGPuB,EAASE,IAmBHvC,WAhBW,SAACc,GAClB,IAAMyB,EAAY,eACbpE,EADa,CAEhBqD,SAAUV,IAEZuB,EAASE,IAYHpE,MAAOA,IAET,4BAAQL,KAAK,SAAS0E,QAAS,SAACN,GAAD,OAAOO,OAAOC,UAA7C,yBAIF,6BAAS1B,UAAU,SACjB,kBAAC,EAAD,CAAOQ,SAAUrD,EAAMqD,SAAUtB,MAAO/B,EAAM+B,WCxDlCyC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ebc14ffa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Label_label__19REL\",\"label__row\":\"Label_label__row__2G0T2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sheet\":\"sheet_sheet__2gbfq\"};","import React, { ChangeEvent } from 'react';\nimport './StyleSetting.css';\nimport { StyleSettingProps } from 'types/State';\n\nconst StyleSetting = (props: StyleSettingProps) => {\n  const handleInputChange = (\n    e: ChangeEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    const target = e.target;\n    const getChecked = (v: any) => v.checked; // HTMLSelectElement doesn't has 'checked' property\n    const value =\n      target.type === 'checkbox' ? getChecked(target) : target.value;\n    const name = target.name;\n    props.onChangeFn({\n      [name]: value,\n    });\n  };\n\n  return (\n    <form>\n      <fieldset>\n        <div>\n          <input\n            name=\"fontSize\"\n            type=\"number\"\n            min=\"1\"\n            value={props.state.fontSize}\n            onChange={handleInputChange}\n          />\n          <label>フォントサイズ (font size, px):</label>\n        </div>\n        <div> \n          <input\n            name=\"linesNum\"\n            type=\"number\"\n            min=\"1\"\n            value={props.state.linesNum}\n            onChange={handleInputChange}\n          />\n          <label>ラベル行数 (num of lines):</label>\n        </div>\n        <div>\n          <input\n            name=\"width\"\n            type=\"number\"\n            min=\"1\"\n            value={props.state.width}\n            onChange={handleInputChange}\n          />\n          <label>ラベル横幅 (width, mm):</label>\n        </div>\n        <div>\n          <input\n            name=\"frame\"\n            type=\"checkbox\"\n            checked={props.state.frame}\n            onChange={handleInputChange}\n          />\n          <label>罫線をつける (ruled line):</label>\n        </div>\n        <div>\n          <select\n            name=\"align\"\n            value={props.state.align}\n            onChange={handleInputChange}\n          >\n            <option value=\"left\">左 (left)</option>\n            <option value=\"center\">中央 (center)</option>\n            <option value=\"right\">右 (right)</option>\n          </select>\n          <label>文字寄せ (text align):</label>\n        </div>\n      </fieldset>\n    </form>\n  );\n};\n\nexport default StyleSetting;\n","import React, { ChangeEvent } from \"react\";\nimport parse from \"csv-parse/lib/sync\";\n\ninterface MenuProps {\n  onChange: Function;\n}\n\nconst FiileReader = (props: MenuProps) => {\n  \n  const handleInputChange = async (e: ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.item(0);\n    if (!file) return;\n    const fileText = await readFileAsText(file)\n    const csvData:string[][] = parse(fileText, { columns: false })\n    props.onChange(csvData)\n  }\n  \n  return (\n    <input\n      type=\"file\"\n      onChange={handleInputChange}\n    />\n  )\n}\n\nfunction readFileAsText(file: Blob): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve((reader.result as string) || '');\n    reader.onerror = () => reject(reader.error);\n    reader.readAsText(file);\n  });\n}\n\nexport default FiileReader;\n","import React from 'react';\nimport StyleSetting from './StyleSetting';\nimport { SettingProps } from 'types/State';\nimport FileReader from './FileReader';\n\nconst Setting = (props: SettingProps) => {\n  return (\n    <div>\n      <FileReader onChange={props.updateFile} />\n      <StyleSetting onChangeFn={props.updateStyle} state={props.state.style} />\n    </div>\n  );\n};\n\nexport default Setting;\n","import * as React from 'react';\nimport classes from './Label.module.css';\nimport { CSSProperties } from 'react';\nimport { LabelProps } from 'types/State';\n\nconst makeLabelStyle = (props: LabelProps) => {\n  const borderStyle: CSSProperties = props.style.frame\n    ? {}\n    : { border: 'none' };\n  const labelStyle = {\n    ...borderStyle,\n    width: props.style.width + 'mm',\n    textAlign: props.style.align,\n    fontSize: props.style.fontSize + 'px',\n  };\n  return labelStyle;\n};\n\nconst makeLabelRowStyle = (props: LabelProps) => {\n  const borderStyle: CSSProperties = props.style.frame\n    ? {}\n    : { border: 'none' };\n  return borderStyle;\n};\n\nconst Label = (props: LabelProps) => {\n  const labelStyle = makeLabelStyle(props);\n  const rowStyle = makeLabelRowStyle(props);\n\n  const rows = props.content.map((v, i) => (\n    <div className={classes.label__row} style={i === 1 ? {...rowStyle, fontStyle: 'italic'} : rowStyle} key={i}>\n      <div>{v}</div>\n    </div>\n  ));\n  return (\n    <div className={classes.label} style={labelStyle}>\n      {rows}\n    </div>\n  );\n};\n\nexport default Label;\n","import * as React from 'react';\nimport Label from './Label';\nimport classes from './index.module.css';\nimport { SheetProps } from 'types/State';\n\nconst formatContent = (contents: string[][],  linesNum: number) => {\n  const formatted = contents.map(content => {\n    const v = [...content]\n    if (linesNum > v.length) {\n      const dif: string[] = Array(linesNum - v.length).fill(\"　\") // 高さ確保のためスペースを埋める\n      v.push(...dif)\n    } else {\n      v.length = linesNum\n    }\n    return v\n  })\n  return formatted \n}\n\nconst Sheet = (props: SheetProps) => {\n  const contents = formatContent(props.contents, props.style.linesNum)\n  const labels = contents.map((v, i) => (\n    <Label content={v} style={props.style} key={i} />\n  ));\n  return <div className={classes.sheet}>{labels}</div>;\n};\n\nexport default Sheet;\n","/*\nrefs:\nhttps://qiita.com/cognitom/items/d39d5f19054c8c8fd592\n*/\n\nimport React, { useState } from 'react';\nimport Setting from './setting';\nimport Sheet from './sheet';\nimport { SheetProps } from '../types/State';\nimport './App.css';\n\nconst sampleLabelContent = [\n  'Nippon: Fukuoka-ken',\n  'Fukuoka-shi, Nishiku',\n  '12 I 2020, Fuuki',\n  `33°35'50\"N 130°13'26\"E`,\n  '40m 福岡市 九州大学',\n];\nconst sampleContents = [...Array(100)].map((_) => sampleLabelContent);\nconst defaultState: SheetProps = {\n  contents: sampleContents,\n  style: {\n    frame: true,\n    width: 22,\n    align: 'center',\n    linesNum: 5,\n    fontSize: 6,\n  },\n};\n\nconst App = () => {\n  const [state, setState] = useState(defaultState);\n\n  const updateStyle = (v: Object) => {\n    const updatedState = {\n      ...state,\n      style: {\n        ...state.style,\n        ...v,\n      },\n    };\n    setState(updatedState);\n  };\n\n  const updateFile = (v: string[][]) => {\n    const updatedState = {\n      ...state,\n      contents: v,\n    };\n    setState(updatedState);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"no_print\">\n        <a href=\"https://github.com/fuuki/label-generator\">\n          使い方はこちら（How to use）\n        </a>\n        <Setting\n          updateStyle={updateStyle}\n          updateFile={updateFile}\n          state={state}\n        />\n        <button type=\"button\" onClick={(_) => window.print()}>\n          印刷 (Print)\n        </button>\n      </div>\n      <section className=\"sheet\">\n        <Sheet contents={state.contents} style={state.style} />\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}