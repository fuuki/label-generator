{"version":3,"sources":["feature/component/sheet/Label.module.css","feature/component/sheet/index.module.css","feature/styleSlice.ts","feature/dataSlice.ts","app/store.tsx","feature/component/setting/StyleSetting.tsx","feature/component/setting/FileReader.tsx","feature/component/setting/index.tsx","feature/component/sheet/Label.tsx","feature/component/sheet/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","initialState","frame","width","textAlign","linesNum","fontSize","fontStyle","rowStyles","Array","map","_","slice","createSlice","name","reducers","setFrame","state","action","payload","setWidth","setLinesNum","updatedCount","countDiff","newRowStyle","concat","v","updatedRowStyles","setAllRowFontSize","setAllRowFontStyle","setAllRowAlign","setRowFontSize","index","i","setRowFontStyle","setRowAlign","actions","contents","setContents","store","configureStore","reducer","style","styleSlice","data","dataSlice","useSelector","rawUseSelector","StyleSetting","rowCount","dispatch","useDispatch","parseNum","e","parseInt","target","value","type","min","onChange","checked","key","readFileAsText","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsText","FiileReader","handleInputChange","a","files","item","fileText","csvData","parse","columns","Setting","Label","props","labelStyle","borderStyle","border","makeLabelStyle","makeLabelRowStyles","rows","content","className","classes","label__row","label","Sheet","labels","length","dif","fill","push","formatContent","sheet","App","href","onClick","window","print","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26b65c63.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Label_label__-zWEa\",\"label__row\":\"Label_label__row__1t3R9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sheet\":\"sheet_sheet__3FEj-\"};","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// 参考: https://future-architect.github.io/articles/20200501/\n\n// 型定義\nexport type Align = 'left' | 'center' | 'right';\nexport type FontStyle = 'normal' | 'italic';\n\nexport interface LabelRowStyle {\n  fontSize: number,\n  fontStyle: FontStyle,\n  textAlign: Align,\n}\n\nexport interface LabelStyle {\n  frame: boolean;\n  width: number;\n  textAlign: Align;\n  linesNum: number;\n  fontSize: number;\n  fontStyle: FontStyle;\n  rowStyles: LabelRowStyle[];\n}\n\n// 初期状態\nconst initialState: LabelStyle = {\n  frame: true,\n  width: 22,\n  textAlign: 'center',\n  linesNum: 5,\n  fontSize: 6,\n  fontStyle: 'normal',\n  rowStyles: [...Array(5)].map(_ => ({\n    fontSize: 6,\n    fontStyle: 'normal',\n    textAlign: 'center',\n  })),\n}\n\nconst maxRowCount = 20;\n\n// createSliceでreducerとactionを同時に定義\nexport const slice = createSlice({\n  name: 'labelStyle',\n  initialState,\n  reducers: {\n    // ラベル全体\n    setFrame: (state, action: PayloadAction<boolean>) => ({\n      ...state,\n      frame: action.payload,\n    }),\n    setWidth: (state, action: PayloadAction<number>) => ({\n      ...state,\n      width: action.payload\n    }),\n    setLinesNum: (state, action: PayloadAction<number>) => {\n      const updatedCount = action.payload < 1 ? 1\n        : action.payload > maxRowCount ? maxRowCount : action.payload;\n      const countDiff = updatedCount - state.linesNum;\n      const updatedRowStyles = (): LabelRowStyle[] => {\n        if (countDiff > 0) {\n          const newRowStyle: LabelRowStyle = {\n            fontSize: state.fontSize,\n            fontStyle: state.fontStyle,\n            textAlign: state.textAlign,\n          }\n          return state.rowStyles.concat([...Array(countDiff)].map(v => newRowStyle));\n        }\n        return state.rowStyles.slice(0, updatedCount);\n      }\n      return {\n        ...state,\n        linesNum: updatedCount,\n        rowStyles: updatedRowStyles(),\n      }\n    },\n    // 行の一括設定\n    setAllRowFontSize: (state, action: PayloadAction<number>) => {\n      const fontSize = action.payload;\n      return {\n        ...state,\n        fontSize,\n        rowStyles: state.rowStyles.map((v) => ({ ...v, fontSize }))\n      }\n    },\n    setAllRowFontStyle: (state, action: PayloadAction<FontStyle>) => {\n      const fontStyle = action.payload;\n      return {\n        ...state,\n        fontStyle,\n        rowStyles: state.rowStyles.map((v) => ({ ...v, fontStyle }))\n      }\n    },\n    setAllRowAlign: (state, action: PayloadAction<Align>) => {\n      const textAlign = action.payload;\n      return {\n        ...state,\n        textAlign,\n        rowStyles: state.rowStyles.map((v) => ({ ...v, textAlign }))\n      }\n    },\n    // 各行の設定\n    setRowFontSize: (state, action: PayloadAction<[number, number]>) => {\n      const index = action.payload[0];\n      const fontSize = action.payload[1];\n      return ({\n        ...state,\n        rowStyles: state.rowStyles.map((v, i) => i === index ? { ...v, fontSize } : v)\n      })\n    },\n    setRowFontStyle: (state, action: PayloadAction<[number, FontStyle]>) => {\n      const index = action.payload[0];\n      const fontStyle = action.payload[1];\n      return ({\n        ...state,\n        rowStyles: state.rowStyles.map((v, i) => i === index ? { ...v, fontStyle } : v)\n      })\n    },\n    setRowAlign: (state, action: PayloadAction<[number, Align]>) => {\n      const index = action.payload[0];\n      const textAlign = action.payload[1];\n      return ({\n        ...state,\n        rowStyles: state.rowStyles.map((v, i) => i === index ? { ...v, textAlign } : v)\n      })\n    },\n  },\n});\n\nexport const { setFrame, setWidth, setAllRowAlign, setAllRowFontStyle, setLinesNum, setAllRowFontSize, setRowFontSize, setRowAlign, setRowFontStyle } = slice.actions;\n\nexport default slice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// 参考: https://future-architect.github.io/articles/20200501/\n\n// 型定義\nexport type LabelContent = string[];\nexport interface LabelData {\n  contents: LabelContent[];\n}\n\n// 初期状態\nconst sampleLabelContents = [\n  [\"ここに表示\", \"されているのは\", \"サンプルの\", \"データです\"],\n  [\"ファイルを選択\", \"ボタンから\", \"CSVファイルを\", \"投入してください\"],\n  [\"このツールの\", \"使い方は\", \"左上のリンクを\", \"ご参照ください\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Nishiku\", \"12 I 2020, Fuuki\", \"33°35'50\\\"N 130°13'26\\\"E\", \"40m 福岡市 九州大学伊都地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Nishiku\", \"12 I 2020, Fuuki\", \"33°35'50\\\"N 130°13'26\\\"E\", \"40m 福岡市 九州大学伊都地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Nishiku\", \"14 I 2020, Fuuki\", \"33°35'50\\\"N 130°13'26\\\"E\", \"40m 福岡市 九州大学伊都地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Nishiku\", \"14 I 2020, Fuuki\", \"33°35'50\\\"N 130°13'26\\\"E\", \"40m 福岡市 九州大学伊都地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Nishiku\", \"14 I 2020, Fuuki\", \"33°35'50\\\"N 130°13'26\\\"E\", \"40m 福岡市 九州大学伊都地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Minamiku\", \"21 I 2020, Fuuki\", \"33°33'37\\\"N 130°25'49\\\"E\", \"40m 福岡市 九州大学芸術工学部\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Minamiku\", \"21 I 2020, Fuuki\", \"33°33'37\\\"N 130°25'49\\\"E\", \"40m 福岡市 九州大学芸術工学部\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Minamiku\", \"21 I 2020, Fuuki\", \"33°33'37\\\"N 130°25'49\\\"E\", \"40m 福岡市 九州大学芸術工学部\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Higashiku\", \"6 II 2020, Fuuki\", \"33°37'22\\\"N 130°25'30\\\"E\", \"40m 福岡市 九州大学箱崎地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Higashiku\", \"6 II 2020, Fuuki\", \"33°37'22\\\"N 130°25'30\\\"E\", \"40m 福岡市 九州大学箱崎地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Higashiku\", \"7 II 2020, Fuuki\", \"33°37'22\\\"N 130°25'30\\\"E\", \"40m 福岡市 九州大学箱崎地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Higashiku\", \"8 II 2020, Fuuki\", \"33°37'22\\\"N 130°25'30\\\"E\", \"40m 福岡市 九州大学箱崎地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Higashiku\", \"28 II 2020, Fuuki\", \"33°36'36\\\"N 130°24'59\\\"E\", \"40m 福岡市 九州大学病院地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Higashiku\", \"28 II 2020, Fuuki\", \"33°36'36\\\"N 130°24'59\\\"E\", \"40m 福岡市 九州大学病院地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Higashiku\", \"28 II 2020, Fuuki\", \"33°36'36\\\"N 130°24'59\\\"E\", \"40m 福岡市 九州大学病院地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Higashiku\", \"28 II 2020, Fuuki\", \"33°36'36\\\"N 130°24'59\\\"E\", \"40m 福岡市 九州大学病院地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Higashiku\", \"29 II 2020, Fuuki\", \"33°36'36\\\"N 130°24'59\\\"E\", \"40m 福岡市 九州大学病院地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Higashiku\", \"29 II 2020, Fuuki\", \"33°36'36\\\"N 130°24'59\\\"E\", \"40m 福岡市 九州大学病院地区\"],\n  [\"Nippon: Fukuoka-ken\", \"Fukuoka-shi, Higashiku\", \"30 II 2020, Fuuki\", \"33°36'36\\\"N 130°24'59\\\"E\", \"40m 福岡市 九州大学病院地区\"],\n]\n\nconst initialState: LabelData = {\n  contents: sampleLabelContents,\n}\n\n// createSliceでreducerとactionを同時に定義\nexport const slice = createSlice({\n  name: 'labelData',\n  initialState,\n  reducers: {\n    setContents: (state, action: PayloadAction<LabelContent[]>) => ({\n      ...state,\n      contents: action.payload,\n    }),\n  },\n});\n\nexport const { setContents } = slice.actions;\n\nexport default slice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport styleSlice from '../feature/styleSlice';\nimport dataSlice from '../feature/dataSlice'\nimport { useSelector as rawUseSelector, TypedUseSelectorHook } from 'react-redux';\n\nexport const store = configureStore({\n  reducer: {\n    style: styleSlice,\n    data: dataSlice,\n  }\n});\n\n// 複数のreducerをまとめた場合に、最終的なStateの型を取り出す\nexport type RootState = ReturnType<typeof store.getState>;\n\n// 型情報付きのuseSelectorをここで宣言\nexport const useSelector: TypedUseSelectorHook<RootState> = rawUseSelector","import React, { ChangeEvent } from 'react';\nimport './StyleSetting.css';\nimport { useDispatch } from 'react-redux';\nimport { setAllRowFontSize, setLinesNum, setWidth, setFrame, setAllRowAlign, Align, setRowFontSize, setRowAlign, setRowFontStyle, FontStyle, setAllRowFontStyle } from 'feature/styleSlice';\nimport { useSelector } from 'app/store'\n\nconst StyleSetting = () => {\n  const state = useSelector((state) => ({\n    ...state.style,\n  }));\n  const dispatch = useDispatch()\n\n  const parseNum = (e: ChangeEvent<HTMLInputElement>) => parseInt(e.target.value)\n\n  const FormTableRows = (rowCount: number) => (\n    [...Array(rowCount)].map((_, i) => (\n      <tr key={i}>\n        <td>\n          {i + 1}\n        </td>\n        <td>\n          <input\n            name=\"rowFontSize\"\n            type=\"number\"\n            value={state.rowStyles[i].fontSize}\n            onChange={e => dispatch(setRowFontSize([i, parseNum(e)]))}\n          />\n        </td>\n        <td>\n          <select\n            name=\"rowFontStyle\"\n            value={state.rowStyles[i].fontStyle}\n            onChange={e => dispatch(setRowFontStyle([i, e.target.value as FontStyle]))}\n          >\n            <option value=\"normal\">通常 (normal)</option>\n            <option value=\"italic\">斜体 (italic)</option>\n          </select>\n        </td>\n        <td>\n          <select\n            name=\"rowAlign\"\n            value={state.rowStyles[i].textAlign}\n            onChange={e => dispatch(setRowAlign([i, e.target.value as Align]))}\n          >\n            <option value=\"left\">左 (left)</option>\n            <option value=\"center\">中央 (center)</option>\n            <option value=\"right\">右 (right)</option>\n          </select>\n        </td>\n      </tr>\n    ))\n  )\n\n  return (\n    <form>\n      <fieldset>\n        <legend>ラベル全体</legend>\n        <div>\n          <input\n            name=\"linesNum\"\n            type=\"number\"\n            min=\"1\"\n            value={state.linesNum}\n            onChange={e => dispatch(setLinesNum(parseNum(e)))}\n          />\n          <label>ラベル行数 (num of lines):</label>\n        </div>\n        <div>\n          <input\n            name=\"width\"\n            type=\"number\"\n            min=\"1\"\n            value={state.width}\n            onChange={e => dispatch(setWidth(parseNum(e)))}\n          />\n          <label>ラベル横幅 (width, mm):</label>\n        </div>\n        <div>\n          <input\n            name=\"frame\"\n            type=\"checkbox\"\n            checked={state.frame}\n            onChange={e => dispatch(setFrame(e.target.checked))}\n          />\n          <label>罫線をつける (ruled line):</label>\n        </div>\n      </fieldset>\n\n      <fieldset>\n        <legend>一括設定</legend>\n        <div>\n          <select\n            name=\"align\"\n            value={state.textAlign}\n            onChange={e => dispatch(setAllRowAlign(e.target.value as Align))}\n          >\n            <option value=\"left\">左 (left)</option>\n            <option value=\"center\">中央 (center)</option>\n            <option value=\"right\">右 (right)</option>\n          </select>\n          <label>文字寄せ (text align):</label>\n        </div>\n        <div>\n          <select\n            name=\"fontSTyle\"\n            value={state.fontStyle}\n            onChange={e => dispatch(setAllRowFontStyle(e.target.value as FontStyle))}\n          >\n            <option value=\"normal\">通常 (normal)</option>\n            <option value=\"italic\">斜体 (italic)</option>\n          </select>\n          <label>フォントスタイル (font style):</label>\n        </div>\n        <div>\n          <input\n            name=\"fontSize\"\n            type=\"number\"\n            min=\"1\"\n            value={state.fontSize}\n            onChange={e => dispatch(setAllRowFontSize(parseNum(e)))}\n          />\n          <label>フォントサイズ (font size, px):</label>\n        </div>\n      </fieldset>\n\n      <fieldset>\n        <legend>行ごとの設定</legend>\n        <table>\n          <thead>\n            <tr>\n              <th>行</th>\n              <th>フォントサイズ</th>\n              <th>スタイル</th>\n              <th>文字寄せ</th>\n            </tr>\n          </thead>\n          <tbody>\n            {FormTableRows(state.linesNum)}\n          </tbody>\n        </table>\n      </fieldset>\n    </form>\n  );\n};\n\nexport default StyleSetting;\n","import React, { ChangeEvent } from \"react\";\nimport parse from \"csv-parse/lib/sync\";\nimport { useDispatch } from \"react-redux\";\nimport { setContents } from \"feature/dataSlice\";\n\nconst FiileReader = () => {\n  const dispatch = useDispatch()\n\n  const handleInputChange = async (e: ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.item(0);\n    if (!file) return;\n    const fileText = await readFileAsText(file)\n    const csvData: string[][] = parse(fileText, { columns: false })\n    dispatch(setContents(csvData))\n  }\n\n  return (\n    <input\n      type=\"file\"\n      onChange={handleInputChange}\n    />\n  )\n}\n\nfunction readFileAsText(file: Blob): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve((reader.result as string) || '');\n    reader.onerror = () => reject(reader.error);\n    reader.readAsText(file);\n  });\n}\n\nexport default FiileReader;\n","import React from 'react';\nimport StyleSetting from './StyleSetting';\nimport FileReader from './FileReader';\n\nconst Setting = () => {\n  return (\n    <div>\n      <FileReader />\n      <StyleSetting />\n    </div>\n  );\n};\n\nexport default Setting;\n","import * as React from 'react';\nimport classes from './Label.module.css';\nimport { CSSProperties } from 'react';\nimport { LabelContent } from 'feature/dataSlice';\nimport { LabelStyle } from 'feature/styleSlice';\n\nexport interface LabelProps {\n  content: LabelContent;\n  style: LabelStyle;\n}\n\nconst makeLabelStyle = (props: LabelProps) => {\n  const borderStyle: CSSProperties = props.style.frame\n    ? {}\n    : { border: 'none' };\n  const labelStyle = {\n    ...borderStyle,\n    width: props.style.width + 'mm',\n  };\n  return labelStyle;\n};\n\nconst makeLabelRowStyles = (labelStyle: LabelStyle) => {\n  const borderStyle: CSSProperties = labelStyle.frame\n    ? {}\n    : { border: 'none' };\n  return labelStyle.rowStyles.map(v => ({...v, ...borderStyle}));\n};\n\nconst Label = (props: LabelProps) => {\n  const labelStyle = makeLabelStyle(props);\n  const rowStyles = makeLabelRowStyles(props.style);\n\n  // Note. rowStyles の行数は設定値、content の行数はデータ\n  const rows = props.content.map((v, i) => (\n    <div className={classes.label__row} style={rowStyles[i]} key={i}>\n      <div>{v}</div>\n    </div>\n  ));\n  return (\n    <div className={classes.label} style={labelStyle}>\n      {rows}\n    </div>\n  );\n};\n\nexport default Label;\n","import * as React from 'react';\nimport Label from './Label';\nimport classes from './index.module.css';\nimport { useSelector } from 'app/store';\n\nconst formatContent = (contents: string[][], linesNum: number) => {\n  const formatted = contents.map(content => {\n    const v = [...content]\n    if (linesNum > v.length) {\n      const dif: string[] = Array(linesNum - v.length).fill(\"　\") // 高さ確保のためスペースを埋める\n      v.push(...dif)\n    } else {\n      v.length = linesNum\n    }\n    return v\n  })\n  return formatted\n}\n\nconst Sheet = () => {\n\n  const { style, data } = useSelector((state) => {\n    return {\n      style: state.style,\n      data: state.data,\n    };\n  });\n\n  const contents = formatContent(data.contents, style.linesNum)\n  const labels = contents.map((v, i) => (\n    <Label content={v} style={style} key={i} />\n  ));\n  return <div className={classes.sheet}>{labels}</div>;\n};\n\nexport default Sheet;\n","/*\nrefs:\nhttps://qiita.com/cognitom/items/d39d5f19054c8c8fd592\n*/\n\nimport React from 'react';\nimport Setting from 'feature/component/setting';\nimport Sheet from 'feature/component/sheet';\nimport './App.css';\nimport { store } from 'app/store'\nimport { Provider } from 'react-redux';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <div className=\"no_print\">\n          <a href=\"https://github.com/fuuki/label-generator/blob/master/instructions/README_ja.md#%E6%A8%99%E6%9C%AC%E3%83%A9%E3%83%99%E3%83%AB%E4%BD%9C%E6%88%90%E3%83%84%E3%83%BC%E3%83%AB\">\n            使い方はこちら（How to use）\n        </a>\n          <Setting />\n          <button type=\"button\" onClick={(_) => window.print()}>\n            印刷 (Print)\n        </button>\n        </div>\n        <section className=\"sheet\">\n          <Sheet />\n        </section>\n      </Provider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}